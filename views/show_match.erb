<h2>Participants</h2>
<% if participants.empty? %>
  <span>No participants yet, go add one :)</span>
<% end%>
<ul class="participants">
  <% participants.each do |participant| %>
    <li>
      <span><%= participant %></span>
    </li>
  <% end %>
</ul>

<div class="menu">
  <span>add bot: </span>

  <label id="toggle-library" class="button" for="show-library">from library</label>

  <label id="load" class="button">
    <input type="file" id="file_load" hidden>
    from file
  </label>

  <input type="button" value="create your own" id="create-own" class="button">
</div>

<input id="show-library" class="toggle" type="checkbox" autocomplete="off" hidden>
<div id="bots-library" class="toggleable submenu">
  <div id="bots-library-folders"><span>folder: </span></div>
  <div id="bots-library-contents"></div>
</div>

<input id="show-editor" class="toggle" type="checkbox" autocomplete="off" hidden>
<div id="editor" class="toggleable">
  <textarea id="code"></textarea>

  <div class="controls">
    <input type="button" value="add to match" id="add" class="button">
    <input type="button" value="clear editor" id="clear" class="button">
    <input type="button" value="cancel adding" id="hide-editor" class="button">
  </div>
</div>

<div id="play-buttons">
  <a class="button" id="play-match" href="view">View Match</a>
  <a class="button" id="download-match" href="play">Download Match</a>
</div>

<style type="text/css">
  .menu,
  .submenu,
  #play-buttons {
    background-color: #f3f3f3;
    padding: 13px;
  }

  #play-buttons {
    margin-top: 10px;
  }

  .menu .button {
    text-transform: uppercase;
  }

  .submenu {
    background-color: #EDEDED;
  }

  .button.bot {
  }

  .toggle + .toggleable {
    display: none;
  }

  .toggle:checked + .toggleable {
    display: block;
  }

  #editor .controls {
    text-align: center;
  }

  .play {
    display: none
  }

  #bots-library .button {
    padding: 5px 10px;
  }

  .button.bot {
    background-color: #FFB17A44;
  }

  .button.folder {
    background-color: #CCFF6B44;
  }
</style>

<script>

  var sampleCode = `class MyKillerBot < RTanque::Bot::Brain
  def tick!
    # now do something very killer
  end
end
`
  var setUpCompletions = function(){
    CodeMirror.commands.autocomplete = function(cm) {
      CodeMirror.showHint(cm, CodeMirror.hint.anyword)
    }
  }

  var codeMirrorSettings = {
    mode: 'ruby',
    theme: 'monokai',
    keyMap: 'sublime',
    lineNumbers: true,
    lineWrapping: true,
    scrollbarStyle: 'overlay',
    styleActiveLine: true,
    matchBrackets: true,
    tabSize: 2,
    smartIndent: true,
    autofocus: true,
    cursorScrollMargin: 25,

    extraKeys: {
      "Ctrl-Space": "autocomplete",
      "Shift-Alt-7": "autocomplete",
      "Shift-Ctrl-7": 'toggleCommentIndented'
    }
  }

  var setUpCodeMirror = function() {
    window.editor = CodeMirror.fromTextArea(document.getElementById("code"), codeMirrorSettings)
    editor.setValue(sampleCode)
  }

  var sendToServer = function(code){
    var fd = new FormData()
    fd.append('code', code)

    return axios.post('add_bots', fd).then(function(){
      console.log('bot added')
    }).catch(function(){
      console.log('error occured')
    })
  }

  var setUpSendToServer = function(){
    document.getElementById('add').addEventListener('click',  function(){
      sendToServer(editor.getValue()).then(function(){
        location.reload()
      })
    })
  }

  var readFileContents = function(file, callback){
    var fileReader = new FileReader()

    fileReader.onload = function(event){
      callback(event.target.result)
    }

    fileReader.readAsText(file)
  }

  var setUpFileLoad = function(){
    document.getElementById('file_load').addEventListener('change',  function(event){
      editor.setValue('')

      Array.prototype.forEach.call(event.target.files, function(file){
        console.log(file)

        readFileContents(file, function(textToAdd){
          editor.setValue(editor.getValue() + '\n' + textToAdd)
        })

        swal('Now you can tweak that before sending to the battle')
      })
    })
  }

  var setUpClear = function(){
    document.getElementById('clear').addEventListener('click',  function(){
      editor.setValue('')
    })
  }

  var drawBot = function(bot, holder){
    var botButton = document.createElement('input')
    botButton.type = 'button'
    botButton.classList.add('button')
    botButton.classList.add('bot')
    botButton.value = bot.name

    botButton.addEventListener('click', function(){
      swal({
        text: 'Want to edit it or add to the battle as is?',
        buttons: {
          add: true,
          edit: true
        }
      }).then((value) => {
        if (value === 'edit'){
          emit(document.getElementById('show-editor'), 'show-editor', {code: bot.code})
        }

        else {
          sendToServer(bot.code).then(function(){
            location.reload()
          })
        }
      })
    })

    holder.appendChild(botButton)
  }

  var drawFolderButton = function(folder, holder){
    var folderButton = document.createElement('label')
    folderButton.classList.add('button')
    folderButton.classList.add('folder')
    folderButton.innerHTML = folder.name
    folderButton.htmlFor = 'toggle_' + folder.name

    holder.append(folderButton)
  }

  var drawFolderContents = function(folder, holder){
    var folderToggle = document.createElement('input')
    folderToggle.type = 'radio'
    folderToggle.name = 'visible-folder'
    folderToggle.classList.add('toggle')
    folderToggle.id = 'toggle_' + folder.name
    folderToggle.autocomplete = 'off'
    folderToggle.setAttribute('hidden', true)

    var folderContents = document.createElement('div')
    folderContents.classList.add('toggleable')

    folder.contents.forEach(function(entry){
      if (entry.type === 'bot')
        drawBot(entry, folderContents)

      else
        drawFolder(entry, folderContents, holder)
    })

    holder.append(folderToggle)
    holder.append(folderContents)
  }

  var drawFolder = function(entry, foldersHolder, contentsHolder){
    drawFolderButton(entry, foldersHolder)
    drawFolderContents(entry, contentsHolder)
  }

  var setUpLibrary = function(){
    axios.get('/bots/library').then(function(response){
      var botsLibraryFolders = document.getElementById('bots-library-folders')
      var botsLibraryContents = document.getElementById('bots-library-contents')

      response.data.entries.forEach(function(entry){
        if (entry.type === 'folder')
          drawFolder(entry, botsLibraryFolders, botsLibraryContents)

        else
          drawBot(entry, botsLibraryFolders)
      })
    })
  }

  var setUpEditor = function(){
    console.log('settingupeditor')
    setUpCompletions()
    setUpCodeMirror()
    setUpSendToServer()
    setUpFileLoad()
    setUpClear()
  }

  var showPlayButtons = function(){
    var p = document.querySelectorAll('.participants li')
    console.log(p)
    console.log(p.length)

    if (p.length > 1)
      document.getElementById('play-buttons').style.display = 'block'
  }

  var emit = function(destination, topic, message){
    var evt = new CustomEvent(topic, {
      detail: message
    })

    destination.dispatchEvent(evt)
  }

  document.addEventListener('DOMContentLoaded', function(){
    setUpLibrary()
    showPlayButtons()

    var editorToggle = document.getElementById('show-editor')
    var hideEditor = document.getElementById('hide-editor')
    var createOwn = document.getElementById('create-own')

    editorToggle.addEventListener('show-editor', function(event){
      this.checked = true

      if (!window.editor.setValue){
        setUpEditor()
      }

      editor.setValue(event.detail.code)
    })

    editorToggle.addEventListener('hide-editor', function(){
      this.checked = false
    })

    createOwn.addEventListener('click', function(event){
      emit(editorToggle, 'show-editor', {code: sampleCode})
    })

    hideEditor.addEventListener('click', function(){
      emit(editorToggle, 'hide-editor')
    })
  });

</script>
